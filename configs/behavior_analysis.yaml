# configs/behavior_analysis.yaml

# ===================================================================
# MoshouSapient 行為分析設定檔
# ===================================================================
#
# 此檔案用於定義所有高階的 AI 行為分析規則，
# 例如感興趣區域 (Region of Interest, ROI) 和虛擬警戒線 (Tripwire)。
#
# -------------------------------------------------------------------
# 座標系統說明:
# - 所有座標點 (x, y) 均基於 AI 分析的解析度 (預設為 1280x736)。
# - 座標原點 (0, 0) 位於畫面的左上角。
# - x 軸向右增加，y 軸向下增加。
#
#   (0, 0) ---------------> x+
#     |
#     |
#     |
#     v
#     y+
#
# -------------------------------------------------------------------

# --- 感興趣區域 (Region of Interest, ROI) 設定 ---
# ROI 用於偵測物體是否在特定多邊形區域內停留過久。
roi:
  # 是否啟用 ROI 偵測功能。
  enabled: true

  # ROI 區域的頂點座標列表。
  # - 至少需要 3 個點才能構成一個有效的區域。
  # - 點的順序可以是順時針或逆時針。
  polygon_points:
    - [640, 200]
    - [1280, 200]
    - [1280, 720]
    - [640, 720]

  # 觸發「停留警報」所需的時間閾值 (秒)。
  # 當一個追蹤目標在 ROI 區域內停留超過此設定的秒數時，系統將發出警報。
  dwell_time_threshold: 3.0


# --- 虛擬警戒線 (Tripwire) 設定 ---
# Tripwire 用於偵測物體是否跨越了某條虛擬線段。
tripwires:
  # 是否啟用虛擬警戒線功能。
  enabled: true

  # 警戒線列表。您可以定義一條或多條警戒線。
  lines:
    - # 範例 1: 一條從左到右的水平線，僅在物體從「上方」跨越至「下方」時觸發警報。
      points: [[300, 600], [1000, 600]]

      # 警報觸發方向。可選值:
      #  "cross_to_right": 當物體從線段向量的「左側」跨越到「右側」時觸發。
      #  "cross_to_left":  當物體從線段向量的「右側」跨越到「左側」時觸發。
      #  "both":           雙向跨越都會觸發。
      #
      # 向量方向定義為 points 列表中的 p1 -> p2。
      # 對於一條從左到右的水平線 (p1=[300,600], p2=[1000,600]):
      #
      #        ^
      #        |  "左側" (Left Side)
      #   p1 o-->------>------>--o p2
      #        |  "右側" (Right Side)
      #        v
      #
      # 因此，從上方穿越到下方，即為 "cross_to_right"。
      alert_direction: "cross_to_right"